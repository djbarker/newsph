include "spud_base.rnc"

start = (

	## Options and configuration for the SPH simulation.
	element options {
	
		## System geometry setup.
		element geometry {
		
			## Number of spatial dimensions.
			## <b>Once set this cannot be changed.</b>
			element dimension {
				element integer_value {
					attribute rank {"0"},
					("3"|"2")
				}
			},
			
			## Domain extent.
			element period { real_dim_vector },
						
			## Rescales the simulation by this factor.
			element scale { real }?,
		},
	
		## Options for file input and output.
		element file_io {

			## The directory for output files.
			element directory { anystring },

			## The filename root for output files.
			element root { anystring }?,

			## Wall geometry input files.
			element walls { filename }*
		},
	
		## Options relating to the SPH numerical method
		element sph {

			## Speed of sound in the 'reference' fluid.
			element c0 { real },
			
			## Fluid phase to which the reference speed of sound applies. Speeds of sound in other phases are calcualted based on this.
			## <i>Default value: zero.</i>
			element reference_fluid { integer }?,
			
			## Resolution
			element resolution {
				## The SPH smoothing length.
				element h { real } |
				
				## The particle spacing length/
				element dx { real }
			},
			
			## h_factor specifies how many particles there are per smoothing length.
			## The average particle spacing is given by <i>dx = h/h_factor</i>.
			element h_factor { real },
			
			## Multi Phase Options.
			element multi_phase
			{
				## Number of fluid phases.
				element num_colours { integer },
			
				## Colour interactions. Surface tension coefficients between each pair of fluid phases.
				## If there are N phases then <i>shape</i> must real 'N N'. If this element is absent then no surface forces will be calculated.
				element colour_interactions { real_tensor }?
			}?,
		},
		
		## Options relating to the physical setup of the system.
		element physics {

			## Vector giving the acceleration due to gravity.
			## <i>Default value: (0,0,0).</i>
			element gravity { real_dim_vector }?,
			
			## Background pressure. Must be zero if there are any free surfaces.
			## <i>Default value: 0.</i>
			element atmospheric_pressure { real }?,
			
			## Fluid phases present in the system.
			element fluid {
				
				## Does the fluid feel gravity or not?
				element gravity { empty },

				## Viscosity
				element viscosity { 
					
					## Dynamic or kinematic viscosity?
					element type { element dynamic { empty } | element kinematic { empty } },

					## Value
					element value { real }
				},
				
				## Density
				element density { real }
			}+,

			## Surface tension coefficients between the different phases.
			## <i>Note: the number of elements in the matrix must match the nubmer of "fluid" elements defined above.</i>
			element surface_tensions { real_tensor }?
			
		},
		
		## Options for controlling time-stepping
		element time
		{
			## Time to simulate.
			element t_max { real },
			
			## Smallest allowable time-step. <i>Default value: 1.0E-7.</i>
			element dt_min { real }?,
			
			## Largest allowable time-step. <i>Default value: 1.0E10.</i>
			element dt_max { real }?,
			
			## Time interval at which to output results.
			element dt_write { real },
			
			## Convergence factor; the factor by which the adaptive time-step used is smaller than the minimum necessary timestep.
			## <i>Default value: 0.2.</i>
			element convergence_fac { real }?,
			
			## Rebalancing interval: how often to balance the load between processors. <i> Default value: 20</i>
			element rebalance_interval { integer }?			
		},
		
		## Defines a "fluid region" a recangle (cuboid in 3D) of space where the fluid has the same properties.
		element fluid_region
		{
			## Libspud requires each element of the same type to have a unique name.
			attribute name { string },
		
			## The bottom-left point of the fluid region.
			element x_bl { real_dim_vector },
			
			## The top-right point of the fluid region.
			element x_tr { real_dim_vector },
			
			## Fill type specifies which algorithm should be used to place SPH particles into the domain.
			element fill_type { 

				## Flood filling algorithm.
				element Flood_Fill
				{
				
					## Point to start filling the fluid region from.
					element fill_start_point { real_dim_vector },
					
					## Calculate the correct pressure head under gravity necessary for hydrostatic equilibrium initial conditions.
					element hydrostatic { empty }?
				
				} |
				
				## Full fill algorithm.
				element Full_Fill { empty } |
				
				## Outer fill algorithm. <b>(Not functional currently!)</b>
				element Outer_Fill { empty } |
				
				## Converts already placed particles (usually with flood-fill) to particles of a different phase.
				element Convert { empty } |
				
				## Adjusts the density of any particles within the fluid region without changing to which phase they belong.
				## <i>rho_0</i> now represents a <b>relative</b> density compared to the rest density of the phase.
				element Adjust_Density { empty } |
				
				## Fills a circular shell starting at <i>inner_radius</i> and ending at <i>outer_radius</i>. The particles are placed on circles rather than a grid.
				## The centre of the circle is taken to be the average of <i>x_bl</i> and <i>x_tr</i>.
				element  Shell_Fill
				{
					## Radius at which to begin filling.
					element inner_radius { real },
					
					## Radius at which to end filling.
					element outer_radius { real }
				} |
				
				## Converts "droplets" throught the region on a regular square/cubic grid with specified spacing and droplet radius.
				## These two factors combine to give an approximate saturation (exact if there are no boundaries inside the fluid region).
				element Droplet_Convert
				{
					## Grid spacing for droplets
					element spacing { real },
					
					## Droplet radius
					element radius { real }
				}
			},
			
			## If this tag is present the fluid region will be an ellipse or ellipsoid instead of a rectangle or cuboid in 2D and 3D respectively.
			element elliptical { empty }?,
			
			## Do we want to use equations to specify the intial velocity profile?
			## Equations can be a function of position <i>(x,y,z)</i>, gravity <i>(gx,gy,gz)</i>, density <i>(rho)</i>, viscosity <i>(mu)</i> and scale <i>(scale)</i>.
			## Note: the positions <i>x</i>,<i>y</i> and <i>z</i> are based on the unscaled positions.
			element initial_velocity { 
			
				## X-coordinate of initial velocity field as a function of x,y,z,gx,gy,gz,rho,mu or scale.
				element v_x { string },
				
				## Y-coordinate of initial velocity field as a function of x,y,z,gx,gy,gz,rho,mu or scale.
				element v_y { string },
				
				## Z-coordinate of initial velocity field as a function of x,y,z,gx,gy,gz,rho,mu or scale.
				element v_z { string }			
			}?,
		
			## To which phase does the fluid in this region belong?
			element colour { integer },
			
			## The rest density of the fluid.
			element rho { real },
			
			## The dynamic viscosity of the fluid.
			element mu { real },
			
			## Does the phase feel gravity?
			element gravity { empty }?,
			
			## Speed of sound in the fluid. It is not recommended that this value be specified as it can cause problems at the boundaries between fluids, especially if their densities are very different. If not specified the speed of sound will be calculated from the global <i>c0_ref</i> value.
			element c0 { real }?,
			
			## Which equation of state to use.
			## <i>Default value: Tait Equation.</i>
			element eos { element string_value{
				"Tait Equation"|"Ideal Gas Law"|"Modified Ideal Gas"
				}
			}?,
			
			## For equations of state with a stiffness parameter this is its value. <i>Default value: 7</i>
			element gamma { real }?,
			
			## Do we want to randomize the initial positions of the points?
			## This helps remove crystalline structures which can develop.
			## The particles are jiggled by a factor of dx.
			element jiggle_factor { real }?,
			
			## Additional Physics Options. 
			## Note that the code must be compiled with the tag PHYS_ADD defined to use these features AND the corresponding tags must be set in the additional physics section above.
			element additional_physics
			{
				## Options for flows subject to temperature gradients.
				## The flow is modified by using the Boussinesq approximation.
				element thermal
				{
					## The initial temperature of the region.
					element temperature { real },
					
					## The thermal conductivitiy of a fluid sets how quickly heat diffuses through it.
					element conductivity { real },
					
					## The heat capacity of the fluid.
					element heat_capacity { real },
					
					## The expansion coefficient sets how much the fluids density changes with temperature.
					element expansion { real }
				}?
			}?
		}+
	}
)
